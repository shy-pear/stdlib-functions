


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
    2 00000000                 THUMB
    3 00000000         
    4 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    5 00000000         ; System Call Table
    6 00000000 20001000 
                       HEAP_TOP
                               EQU              0x20001000
    7 00000000 20004FE0 
                       HEAP_BOT
                               EQU              0x20004FE0
    8 00000000 00004000 
                       MAX_SIZE
                               EQU              0x00004000  ; 16KB = 2^14
    9 00000000 00000020 
                       MIN_SIZE
                               EQU              0x00000020  ; 32B  = 2^5
   10 00000000         
   11 00000000 20006800 
                       MCB_TOP EQU              0x20006800  ; 2^10B = 1K Space
   12 00000000 20006BFE 
                       MCB_BOT EQU              0x20006BFE
   13 00000000 00000002 
                       MCB_ENT_SZ
                               EQU              0x00000002  ; 2B per entry
   14 00000000 00000200 
                       MCB_TOTAL
                               EQU              512         ; 2^9 = 512 entries
                                                            
   15 00000000         
   16 00000000 FFFFFFFF 
                       INVALID EQU              -1          ; an invalid id
   17 00000000         
   18 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   19 00000000         ; Memory Control Block Initialization
   20 00000000                 EXPORT           _heap_init
   21 00000000         _heap_init
   22 00000000         ;save registers
   23 00000000 E92D 5FFE       STMFD            SP!, {R1-R12,LR}
   24 00000004         
   25 00000004 F44F 4080       LDR              R0, =MAX_SIZE
   26 00000008 496F            LDR              R1, =MCB_TOP
   27 0000000A         ; store max_size at top
   28 0000000A F841 0B04       STR              R0 , [R1], #4
   29 0000000E         
   30 0000000E F04F 0400       MOV              R4, #0x0
   31 00000012 F501 6380       ADD              R3, R1, #0x400
   32 00000016         
   33 00000016 4299    loop    CMP              R1, R3
   34 00000018 DC05            BGT              heap_init_done
   35 0000001A 600C            STR              R4, [R1]
   36 0000001C F8C1 4001       STR              R4, [R1, #1]
   37 00000020         
   38 00000020 F101 0102       ADD              R1, R1, #2
   39 00000024 E7F7            B                loop
   40 00000026         heap_init_done



ARM Macro Assembler    Page 2 


   41 00000026         ;Retrieve registers
   42 00000026 E8BD 5FFE       LDMFD            SP!, {R1-R12, LR}
   43 0000002A         ;return
   44 0000002A 46F7            MOV              pc, lr
   45 0000002C         
   46 0000002C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   47 0000002C         ; Kernel Memory Allocation
   48 0000002C         ; void* _k_alloc( int size )
   49 0000002C                 EXPORT           _kalloc
   50 0000002C         _kalloc
   51 0000002C         ;Save registers
   52 0000002C E92D 5FFE       STMFD            SP!, {R1-R12,LR}
   53 00000030 4603            MOV              R3, R0      ; R3 = size
   54 00000032         
   55 00000032 4965            LDR              R1, =MCB_TOP
   56 00000034 4A65            LDR              R2, =MCB_BOT
   57 00000036         
   58 00000036 F000 F803       BL               _ralloc
   59 0000003A         
   60 0000003A         ;Retrieve registers
   61 0000003A E8BD 5FFE       LDMFD            sp!, {r1-r12, lr}
   62 0000003E         ;return
   63 0000003E 46F7            MOV              pc, lr
   64 00000040         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   65 00000040         _ralloc
   66 00000040 E92D 5FFE       STMFD            SP!, {R1-R12,LR}
   67 00000044         
   68 00000044         ; R2 = mcb bottom (right), R1 = mcb top (left)
   69 00000044 EBA2 0B01       SUB              R11, R2, R1
   70 00000048         
   71 00000048         ; R10 = mcb entire size
   72 00000048 F04F 0A02       LDR              R10, =MCB_ENT_SZ
   73 0000004C         ; R4 = entire
   74 0000004C EB0B 040A       ADD              R4, R11, R10
   75 00000050         ; R5 = half
   76 00000050 EA4F 0564       ASR              R5, R4, #1
   77 00000054         ; R6 = midpoint
   78 00000054 EB01 0605       ADD              R6, R1, R5
   79 00000058         ; R7 = heap_addr
   80 00000058 F04F 0700       MOV              R7, #0x0
   81 0000005C         
   82 0000005C         ; R8 = act_entire_size
   83 0000005C EA4F 1804       LSL              R8, R4, #4
   84 00000060         ; R9 = act_half_size
   85 00000060 EA4F 1905       LSL              R9, R5, #4
   86 00000064         
   87 00000064         ;compare size to act_half_size
   88 00000064 454B            CMP              R3, R9
   89 00000066 DC1A            BGT              ralloc_3
   90 00000068         
   91 00000068         ;recursive call to ralloc
   92 00000068 EBA6 020A       SUB              R2, R6, R10
   93 0000006C F7FF FFE8       BL               _ralloc
   94 00000070         
   95 00000070 4607            MOV              R7, R0
   96 00000072 2F00            CMP              R7, #0      ;if heap address is
                                                             0



ARM Macro Assembler    Page 3 


   97 00000074 D108            BNE              ralloc_1
   98 00000076         
   99 00000076 EBA4 0C0A       SUB              R12, R4, R10
  100 0000007A 448C            ADD              R12, R12, R1
  101 0000007C 4662            MOV              R2, R12
  102 0000007E 4631            MOV              R1, R6
  103 00000080         
  104 00000080         ;recursive call to ralloc
  105 00000080 F7FF FFDE       BL               _ralloc
  106 00000084 4607            MOV              R7, R0
  107 00000086 E02C            B                ralloc_done
  108 00000088         
  109 00000088         ralloc_1
  110 00000088 F8D6 B000       LDR              R11, [R6]
  111 0000008C F00B 0B01       AND              R11, R11, #0x01
  112 00000090 F1BB 0F00       CMP              R11, #0
  113 00000094 D101            BNE              ralloc_2
  114 00000096 F8C6 9000       STR              R9, [R6]
  115 0000009A         
  116 0000009A         ralloc_2
  117 0000009A 4607            MOV              R7, R0
  118 0000009C E021            B                ralloc_done
  119 0000009E         
  120 0000009E         ralloc_3
  121 0000009E F8D1 B000       LDR              R11, [R1]
  122 000000A2 F00B 0B01       AND              R11, R11, #1
  123 000000A6         
  124 000000A6 F1BB 0F00       CMP              R11, #0
  125 000000AA D002            BEQ              ralloc_4
  126 000000AC         
  127 000000AC F04F 0700       MOV              R7, #0
  128 000000B0 E017            B                ralloc_done
  129 000000B2         
  130 000000B2         ralloc_4
  131 000000B2 F8D1 B000       LDR              R11, [R1]
  132 000000B6 45C3            CMP              R11, R8
  133 000000B8 DA02            BGE              ralloc_5
  134 000000BA         
  135 000000BA F04F 0700       MOV              R7, #0
  136 000000BE E010            B                ralloc_done
  137 000000C0         
  138 000000C0         ralloc_5
  139 000000C0 F8D1 B000       LDR              R11, [R1]
  140 000000C4 46C4            MOV              R12, R8
  141 000000C6         
  142 000000C6 F04C 0C01       ORR              R12, R12, #0x1
  143 000000CA F8C1 C000       STR              R12, [R1]
  144 000000CE         
  145 000000CE F8DF C0F8       LDR              R12, =MCB_TOP
  146 000000D2 EBA1 0B0C       SUB              R11, R1, R12
  147 000000D6 EA4F 1B0B       LSL              R11, R11, #4
  148 000000DA         
  149 000000DA F8DF C0F4       LDR              R12, =HEAP_TOP
  150 000000DE EB0B 070C       ADD              R7, R11, R12
  151 000000E2         
  152 000000E2         
  153 000000E2         ralloc_done
  154 000000E2 4638            MOV              R0, R7
  155 000000E4         ;Retrieve registers



ARM Macro Assembler    Page 4 


  156 000000E4 E8BD 5FFE       LDMFD            SP!, {R1-R12, LR}
  157 000000E8         ;return
  158 000000E8 46F7            MOV              pc, lr
  159 000000EA         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  160 000000EA         ; Kernel Memory De-allocation
  161 000000EA         ; void free( void *ptr )
  162 000000EA                 EXPORT           _kfree
  163 000000EA         _kfree
  164 000000EA         ;Save registers
  165 000000EA E92D 5FFE       STMFD            SP!, {R1-R12,LR}
  166 000000EE         
  167 000000EE 4938            LDR              R1, =HEAP_TOP
  168 000000F0 4A35            LDR              R2, =MCB_TOP
  169 000000F2         
  170 000000F2 EBA0 0301       SUB              R3, R0, R1
  171 000000F6 EA4F 1323       ASR              R3, R3, #4
  172 000000FA         
  173 000000FA 4605            MOV              R5, R0
  174 000000FC EB02 0003       ADD              R0, R2, R3
  175 00000100         
  176 00000100 F000 F804       BL               _rfree
  177 00000104         
  178 00000104 4628            MOV              R0, R5
  179 00000106         
  180 00000106         ;Retrieve registers
  181 00000106 E8BD 5FFE       LDMFD            SP!, {R1-R12, LR}
  182 0000010A         ;return
  183 0000010A 46F7            MOV              pc, lr
  184 0000010C         _rfree
  185 0000010C         ;Save registers
  186 0000010C E92D 5FFE       STMFD            SP!, {R1-R12,LR}
  187 00000110         
  188 00000110         ; load mcb contents
  189 00000110 6801            LDR              R1, [R0]
  190 00000112         ; mcb index
  191 00000112 4D2D            LDR              R5, =MCB_TOP
  192 00000114 EBA0 0205       SUB              R2, R0, R5
  193 00000118         ; divide mcb contents by 2^4
  194 00000118 EA4F 1121       ASR              R1, R1, #4
  195 0000011C 460B            MOV              R3, R1
  196 0000011E         ; multiple mcb contents by 2^4
  197 0000011E EA4F 1101       LSL              R1, R1, #4
  198 00000122 460C            MOV              R4, R1
  199 00000124 6001            STR              R1, [R0]
  200 00000126         
  201 00000126 FB92 F6F3       SDIV             R6, R2, R3
  202 0000012A F04F 0C02       MOV              R12, #2
  203 0000012E         
  204 0000012E FB96 FBFC       SDIV             R11, R6, R12
  205 00000132 FB0C 671B       MLS              R7, R12, R11, R6
  206 00000136         
  207 00000136 2F00            CMP              R7, #0
  208 00000138 D11F            BNE              rfree_2
  209 0000013A EB00 0603       ADD              R6, R0, R3
  210 0000013E         
  211 0000013E 4F23            LDR              R7, =MCB_BOT
  212 00000140 42BE            CMP              R6, R7
  213 00000142 DB02            BLT              rfree_1



ARM Macro Assembler    Page 5 


  214 00000144         
  215 00000144 F04F 0900       MOV              R9, #0
  216 00000148 E039            B                rfree_done
  217 0000014A         
  218 0000014A         rfree_1
  219 0000014A F8D6 A000       LDR              R10, [R6]
  220 0000014E F00A 0C01       AND              R12, R10, #0x01
  221 00000152 F1BC 0F00       CMP              R12, #0
  222 00000156 D131            BNE              rfree_4
  223 00000158         
  224 00000158 EA4F 1A6A       ASR              R10, R10, #5
  225 0000015C EA4F 1A4A       LSL              R10, R10, #5
  226 00000160 45A2            CMP              R10, R4
  227 00000162         
  228 00000162 D12B            BNE              rfree_4
  229 00000164 F04F 0B00       MOV              R11, #0
  230 00000168 F8C6 B000       STR              R11, [R6]
  231 0000016C EA4F 0444       LSL              R4, R4, #1
  232 00000170 6004            STR              R4, [R0]
  233 00000172         
  234 00000172         ;recursive call to rfree
  235 00000172 F7FF FFCB       BL               _rfree
  236 00000176 4681            MOV              R9, R0
  237 00000178 E021            B                rfree_done
  238 0000017A         
  239 0000017A         rfree_2
  240 0000017A EBA0 0603       SUB              R6, R0, R3
  241 0000017E 4F12            LDR              R7, =MCB_TOP
  242 00000180 42BE            CMP              R6, R7
  243 00000182 DA02            BGE              rfree_3
  244 00000184 F04F 0900       MOV              R9, #0
  245 00000188 E019            B                rfree_done
  246 0000018A         
  247 0000018A         rfree_3
  248 0000018A F8D6 A000       LDR              R10, [R6]
  249 0000018E F00A 0C01       AND              R12, R10, #0x01
  250 00000192 F1BC 0F00       CMP              R12, #0
  251 00000196 D111            BNE              rfree_4
  252 00000198         
  253 00000198 EA4F 1A6A       ASR              R10, R10, #5
  254 0000019C EA4F 1A4A       LSL              R10, R10, #5
  255 000001A0 45A2            CMP              R10, R4
  256 000001A2 D10B            BNE              rfree_4
  257 000001A4         
  258 000001A4 F04F 0B00       MOV              R11, #0
  259 000001A8 F8C0 B000       STR              R11, [R0]
  260 000001AC EA4F 0444       LSL              R4, R4, #1
  261 000001B0 6034            STR              R4, [R6]
  262 000001B2 4630            MOV              R0, R6
  263 000001B4         
  264 000001B4         ;recursive call to rfree
  265 000001B4 F7FF FFAA       BL               _rfree
  266 000001B8         
  267 000001B8 4681            MOV              R9, R0
  268 000001BA E000            B                rfree_done
  269 000001BC         
  270 000001BC         rfree_4
  271 000001BC 4681            MOV              R9, R0
  272 000001BE         



ARM Macro Assembler    Page 6 


  273 000001BE         rfree_done
  274 000001BE 4648            MOV              R0, R9
  275 000001C0         ; Retrieve registers
  276 000001C0 E8BD 5FFE       LDMFD            SP!, {R1-R12, LR}
  277 000001C4         ; return
  278 000001C4 46F7            MOV              pc, lr
  279 000001C6         
  280 000001C6                 END
              00 00 20006800 
              20006BFE 
              20001000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\heap.d -o.\objects\heap.o -I.\RTE\_Target_1 -I"C:\Pro
gram Files\Keil\ARM\PACK\ARM\CMSIS\5.8.0\CMSIS\Core\Include" -I"C:\Program File
s\Keil\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129" --predefine="__EVAL
 SETA 1" --predefine="__UVISION_VERSION SETA 526" --predefine="_RTE_ SETA 1" --
predefine="TM4C129XNCZAD SETA 1" --list=.\listings\heap.lst heap.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 1 in file heap.s
   Uses
      None
Comment: .text unused
_heap_init 00000000

Symbol: _heap_init
   Definitions
      At line 21 in file heap.s
   Uses
      At line 20 in file heap.s
Comment: _heap_init used once
_kalloc 0000002C

Symbol: _kalloc
   Definitions
      At line 50 in file heap.s
   Uses
      At line 49 in file heap.s
Comment: _kalloc used once
_kfree 000000EA

Symbol: _kfree
   Definitions
      At line 163 in file heap.s
   Uses
      At line 162 in file heap.s
Comment: _kfree used once
_ralloc 00000040

Symbol: _ralloc
   Definitions
      At line 65 in file heap.s
   Uses
      At line 58 in file heap.s
      At line 93 in file heap.s
      At line 105 in file heap.s

_rfree 0000010C

Symbol: _rfree
   Definitions
      At line 184 in file heap.s
   Uses
      At line 176 in file heap.s
      At line 235 in file heap.s
      At line 265 in file heap.s

heap_init_done 00000026

Symbol: heap_init_done
   Definitions
      At line 40 in file heap.s
   Uses
      At line 34 in file heap.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Comment: heap_init_done used once
loop 00000016

Symbol: loop
   Definitions
      At line 33 in file heap.s
   Uses
      At line 39 in file heap.s
Comment: loop used once
ralloc_1 00000088

Symbol: ralloc_1
   Definitions
      At line 109 in file heap.s
   Uses
      At line 97 in file heap.s
Comment: ralloc_1 used once
ralloc_2 0000009A

Symbol: ralloc_2
   Definitions
      At line 116 in file heap.s
   Uses
      At line 113 in file heap.s
Comment: ralloc_2 used once
ralloc_3 0000009E

Symbol: ralloc_3
   Definitions
      At line 120 in file heap.s
   Uses
      At line 89 in file heap.s
Comment: ralloc_3 used once
ralloc_4 000000B2

Symbol: ralloc_4
   Definitions
      At line 130 in file heap.s
   Uses
      At line 125 in file heap.s
Comment: ralloc_4 used once
ralloc_5 000000C0

Symbol: ralloc_5
   Definitions
      At line 138 in file heap.s
   Uses
      At line 133 in file heap.s
Comment: ralloc_5 used once
ralloc_done 000000E2

Symbol: ralloc_done
   Definitions
      At line 153 in file heap.s
   Uses
      At line 107 in file heap.s
      At line 118 in file heap.s
      At line 128 in file heap.s
      At line 136 in file heap.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols


rfree_1 0000014A

Symbol: rfree_1
   Definitions
      At line 218 in file heap.s
   Uses
      At line 213 in file heap.s
Comment: rfree_1 used once
rfree_2 0000017A

Symbol: rfree_2
   Definitions
      At line 239 in file heap.s
   Uses
      At line 208 in file heap.s
Comment: rfree_2 used once
rfree_3 0000018A

Symbol: rfree_3
   Definitions
      At line 247 in file heap.s
   Uses
      At line 243 in file heap.s
Comment: rfree_3 used once
rfree_4 000001BC

Symbol: rfree_4
   Definitions
      At line 270 in file heap.s
   Uses
      At line 222 in file heap.s
      At line 228 in file heap.s
      At line 251 in file heap.s
      At line 256 in file heap.s

rfree_done 000001BE

Symbol: rfree_done
   Definitions
      At line 273 in file heap.s
   Uses
      At line 216 in file heap.s
      At line 237 in file heap.s
      At line 245 in file heap.s
      At line 268 in file heap.s

19 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

HEAP_BOT 20004FE0

Symbol: HEAP_BOT
   Definitions
      At line 7 in file heap.s
   Uses
      None
Comment: HEAP_BOT unused
HEAP_TOP 20001000

Symbol: HEAP_TOP
   Definitions
      At line 6 in file heap.s
   Uses
      At line 149 in file heap.s
      At line 167 in file heap.s

INVALID FFFFFFFF

Symbol: INVALID
   Definitions
      At line 16 in file heap.s
   Uses
      None
Comment: INVALID unused
MAX_SIZE 00004000

Symbol: MAX_SIZE
   Definitions
      At line 8 in file heap.s
   Uses
      At line 25 in file heap.s
Comment: MAX_SIZE used once
MCB_BOT 20006BFE

Symbol: MCB_BOT
   Definitions
      At line 12 in file heap.s
   Uses
      At line 56 in file heap.s
      At line 211 in file heap.s

MCB_ENT_SZ 00000002

Symbol: MCB_ENT_SZ
   Definitions
      At line 13 in file heap.s
   Uses
      At line 72 in file heap.s
Comment: MCB_ENT_SZ used once
MCB_TOP 20006800

Symbol: MCB_TOP
   Definitions
      At line 11 in file heap.s
   Uses
      At line 26 in file heap.s
      At line 55 in file heap.s
      At line 145 in file heap.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 168 in file heap.s
      At line 191 in file heap.s
      At line 241 in file heap.s

MCB_TOTAL 00000200

Symbol: MCB_TOTAL
   Definitions
      At line 14 in file heap.s
   Uses
      None
Comment: MCB_TOTAL unused
MIN_SIZE 00000020

Symbol: MIN_SIZE
   Definitions
      At line 9 in file heap.s
   Uses
      None
Comment: MIN_SIZE unused
9 symbols
365 symbols in table
