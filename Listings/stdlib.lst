


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
    2 00000000                 THUMB
    3 00000000         
    4 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    5 00000000         ; void _bzero( void *s, int n )
    6 00000000         ; Parameters
    7 00000000         ; s   - pointer to the memory location to zero-initializ
                       e
    8 00000000         ; n  - a number of bytes to zero-initialize
    9 00000000         ; Return value
   10 00000000         ;   none
   11 00000000                 EXPORT           _bzero
   12 00000000         _bzero
   13 00000000         ; R0 = S
   14 00000000         ; R1 = n
   15 00000000         
   16 00000000         ; save registers
   17 00000000 E92D 5FFE       PUSH             {R1-R12, LR}
   18 00000004         loop
   19 00000004 2900            CMP              R1, #0      ; check if any more
                                                             bytes left
   20 00000006 D006            BEQ              end_loop
   21 00000008         
   22 00000008 F04F 0900       MOV              R9, #0
   23 0000000C F800 9B01       STRB             R9, [R0], #1
   24 00000010 F1A1 0101       SUB              R1, R1, #1
   25 00000014 E7F6            B                loop
   26 00000016         end_loop
   27 00000016 E8BD 5FFE       POP              {R1-R12, LR}
   28 0000001A 46F7            MOV              pc, lr
   29 0000001C         
   30 0000001C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   31 0000001C         ; char* _strncpy( char* dest, char* src, int size )
   32 0000001C         ; Parameters
   33 0000001C         ;    dest  - pointer to the buffer to copy to
   34 0000001C         ; src - pointer to the zero-terminated string to copy fr
                       om
   35 0000001C         ; size - a total of n bytes
   36 0000001C         ; Return value
   37 0000001C         ;   dest
   38 0000001C                 EXPORT           _strncpy
   39 0000001C         _strncpy
   40 0000001C         ; R0 = dest
   41 0000001C         ; R1 = src
   42 0000001C         ; R2 = size
   43 0000001C         
   44 0000001C E92D 5FFE       PUSH             {R1-R12, LR}
   45 00000020         
   46 00000020         loop_copy
   47 00000020 2A00            CMP              R2, #0      ; check if size = 0
                                                            
   48 00000022 D006            BEQ              end_loop_copy
   49 00000024         
   50 00000024 F811 9B01       LDRB             R9, [R1], #1
   51 00000028 F800 9B01       STRB             R9, [R0], #1
   52 0000002C F1A2 0201       SUB              R2, R2, #1



ARM Macro Assembler    Page 2 


   53 00000030 E7F6            B                loop_copy
   54 00000032         end_loop_copy
   55 00000032 E8BD 5FFE       POP              {R1-R12,LR}
   56 00000036 46F7            MOV              pc, lr
   57 00000038         
   58 00000038         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   59 00000038         ; void* _malloc( int size )
   60 00000038         ; Parameters
   61 00000038         ; size - #bytes to allocate
   62 00000038         ; Return value
   63 00000038         ;    void* a pointer to the allocated space
   64 00000038                 EXPORT           _malloc
   65 00000038         _malloc
   66 00000038 E92D 5FFE       STMFD            SP!, {R1-R12,LR}
   67 0000003C         ; malloc R7 value: 4
   68 0000003C F04F 0704       MOV              R7, #0x04
   69 00000040 DF00            SVC              #0x0
   70 00000042         
   71 00000042         ; resume registers
   72 00000042 E8BD 5FFE       LDMFD            SP!, {R1-R12, LR}
   73 00000046 46F7            MOV              pc, lr
   74 00000048         
   75 00000048         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   76 00000048         ; void _free( void* addr )
   77 00000048         ; Parameters
   78 00000048         ; size - the address of a space to deallocate
   79 00000048         ; Return value
   80 00000048         ;    none
   81 00000048                 EXPORT           _free
   82 00000048         _free
   83 00000048         ; save registers
   84 00000048 E92D 5FFE       STMFD            SP!, {R1-R12,LR}
   85 0000004C         
   86 0000004C         ; free R7 value: 5
   87 0000004C F04F 0705       MOV              R7, #0x05
   88 00000050 DF00            SVC              #0x0
   89 00000052         
   90 00000052         ; resume registers
   91 00000052 E8BD 5FFE       LDMFD            SP!, {R1-R12, LR}
   92 00000056 46F7            MOV              pc, lr
   93 00000058         
   94 00000058         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   95 00000058         ; unsigned int _alarm( unsigned int seconds )
   96 00000058         ; Parameters
   97 00000058         ;   seconds - seconds when a SIGALRM signal should be de
                       livered to the calling program 
   98 00000058         ; Return value
   99 00000058         ;   unsigned int - the number of seconds remaining until
                        any previously scheduled alarm
  100 00000058         ;                  was due to be delivered, or zero if t
                       here was no previously schedul-
  101 00000058         ;                  ed alarm. 
  102 00000058                 EXPORT           _alarm
  103 00000058         _alarm
  104 00000058         ; save registers
  105 00000058 E92D 5FFE       STMFD            SP!, {R1-R12,LR}



ARM Macro Assembler    Page 3 


  106 0000005C         
  107 0000005C         ; alarm R7 value: 1
  108 0000005C F04F 0701       MOV              R7, #0x01
  109 00000060 DF00            SVC              #0x0
  110 00000062         
  111 00000062         ; resume registers
  112 00000062 E8BD 5FFE       LDMFD            sp!, {r1-r12, lr}
  113 00000066 46F7            MOV              pc, lr
  114 00000068         
  115 00000068         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  116 00000068         ; void* _signal( int signum, void *handler )
  117 00000068         ; Parameters
  118 00000068         ;   signum - a signal number (assumed to be 14 = SIGALRM
                       )
  119 00000068         ;   handler - a pointer to a user-level signal handling 
                       function
  120 00000068         ; Return value
  121 00000068         ;   void*   - a pointer to the user-level signal handlin
                       g function previously handled
  122 00000068         ;             (the same as the 2nd parameter in this pro
                       ject)
  123 00000068                 EXPORT           _signal
  124 00000068         _signal
  125 00000068         ; save registers
  126 00000068 E92D 5FFE       STMFD            SP!, {R1-R12,LR}
  127 0000006C         
  128 0000006C         ; signal R7 value: 2
  129 0000006C F04F 0702       MOV              R7, #0x02
  130 00000070 DF00            SVC              #0x0
  131 00000072         
  132 00000072         ; resume registers
  133 00000072 E8BD 5FFE       LDMFD            SP!, {R1-R12, LR}
  134 00000076 46F7            MOV              pc, lr
  135 00000078         
  136 00000078         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  137 00000078                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\stdlib.d -o.\objects\stdlib.o -I.\RTE\_Target_1 -I"C:
\Program Files\Keil\ARM\PACK\ARM\CMSIS\5.8.0\CMSIS\Core\Include" -I"C:\Program 
Files\Keil\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129" --predefine="__
EVAL SETA 1" --predefine="__UVISION_VERSION SETA 526" --predefine="_RTE_ SETA 1
" --predefine="TM4C129XNCZAD SETA 1" --list=.\listings\stdlib.lst stdlib.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 1 in file stdlib.s
   Uses
      None
Comment: .text unused
_alarm 00000058

Symbol: _alarm
   Definitions
      At line 103 in file stdlib.s
   Uses
      At line 102 in file stdlib.s
Comment: _alarm used once
_bzero 00000000

Symbol: _bzero
   Definitions
      At line 12 in file stdlib.s
   Uses
      At line 11 in file stdlib.s
Comment: _bzero used once
_free 00000048

Symbol: _free
   Definitions
      At line 82 in file stdlib.s
   Uses
      At line 81 in file stdlib.s
Comment: _free used once
_malloc 00000038

Symbol: _malloc
   Definitions
      At line 65 in file stdlib.s
   Uses
      At line 64 in file stdlib.s
Comment: _malloc used once
_signal 00000068

Symbol: _signal
   Definitions
      At line 124 in file stdlib.s
   Uses
      At line 123 in file stdlib.s
Comment: _signal used once
_strncpy 0000001C

Symbol: _strncpy
   Definitions
      At line 39 in file stdlib.s
   Uses
      At line 38 in file stdlib.s
Comment: _strncpy used once
end_loop 00000016

Symbol: end_loop



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 26 in file stdlib.s
   Uses
      At line 20 in file stdlib.s
Comment: end_loop used once
end_loop_copy 00000032

Symbol: end_loop_copy
   Definitions
      At line 54 in file stdlib.s
   Uses
      At line 48 in file stdlib.s
Comment: end_loop_copy used once
loop 00000004

Symbol: loop
   Definitions
      At line 18 in file stdlib.s
   Uses
      At line 25 in file stdlib.s
Comment: loop used once
loop_copy 00000020

Symbol: loop_copy
   Definitions
      At line 46 in file stdlib.s
   Uses
      At line 53 in file stdlib.s
Comment: loop_copy used once
11 symbols
346 symbols in table
